using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using WASP.Domain.Common.Interfaces;

namespace WASP.Infrastructure.Vulnerabilities.Executions.ForFiles
{
    public class ForFilesExecuteCalcExecutionVulnerability : ExecutionVulnerability
    {
        private const string EXPLORER_PROCESS = "forfiles";

        private const string COMMAND = @"/p c:\windows\system32 /m notepad.exe /c calc.exe";

        private const string CALCULATOR_PROCESS = "calc.exe";

        private const string CALCULATOR_PROCESS_NAME = "Calculator";

        private const int DELAY_MS = 2000;

        public override string Name { get; } = "Forfiles Calc Execution";

        public override string Description { get; } = @"Executes calc.exe since there is a match for notepad.exe in the c:\windows\System32 folder.";



        public override void Cleanup()
        {
            string[] processesToBeStopped = new string[] { CALCULATOR_PROCESS_NAME };

            Process.GetProcesses()
                .Where(p => processesToBeStopped.Contains(p.ProcessName))
                .ToList()
                .ForEach(p => p.Kill());
        }

        public override bool TryExploit()
        {
            Process.GetProcessesByName(CALCULATOR_PROCESS)
                .ToList()
                .ForEach(p => p.Close());

            Process.Start(new ProcessStartInfo(EXPLORER_PROCESS, COMMAND) { UseShellExecute = true });

            Thread.Sleep(DELAY_MS);

            Process[] processes = Process.GetProcessesByName(CALCULATOR_PROCESS_NAME);

            bool success = processes.Any(p => p.ProcessName == CALCULATOR_PROCESS_NAME);

            if (success)
            {
                Process.GetProcessesByName(CALCULATOR_PROCESS_NAME)
                    .ToList()
                    .ForEach(p => p.Close());
            }

            return success;
        }
    }
}
