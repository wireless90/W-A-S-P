using System.Diagnostics;
using WASP.Domain.Common.Interfaces;

namespace WASP.Infrastructure.Vulnerabilities.Executions.Explorer
{
    public class ExplorerExecuteCalcExecutionVulnerability : ExecutionVulnerability
    {
        private const string EXPLORER_PROCESS = "explorer";

        private const string COMMAND = @"/root, C:\Windows\System32\calc.exe";

        private const string CALCULATOR_PROCESS = "calc.exe";

        private const string CALCULATOR_PROCESS_NAME = "Calculator";

        private const int DELAY_MS = 2000;

        public override string Name { get; } = "Explorer Calc Execution";

        public override string Description { get; } = "Execute calc.exe with the parent process spawning from a new instance of explorer.exe";



        public override void Cleanup()
        {
            string[] processesToBeStopped = new string[] { CALCULATOR_PROCESS_NAME };

            Process.GetProcesses()
                .Where(p => processesToBeStopped.Contains(p.ProcessName))
                .ToList()
                .ForEach(p => p.Kill());
        }

        public override bool TryExploit()
        {
            Process.GetProcessesByName(CALCULATOR_PROCESS)
                .ToList()
                .ForEach(p => p.Close());

            Process.Start(new ProcessStartInfo(EXPLORER_PROCESS, COMMAND) { UseShellExecute = true });

            Thread.Sleep(DELAY_MS);

            Process[] processes = Process.GetProcessesByName(CALCULATOR_PROCESS_NAME);

            bool success = processes.Any(p => p.ProcessName == CALCULATOR_PROCESS_NAME);

            if (success)
            {
                Process.GetProcessesByName(CALCULATOR_PROCESS_NAME)
                    .ToList()
                    .ForEach(p => p.Close());
            }

            return success;
        }
    }
}
