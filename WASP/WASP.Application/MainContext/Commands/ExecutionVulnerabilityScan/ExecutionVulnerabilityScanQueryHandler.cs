using MediatR;
using WASP.Domain.Entities;

namespace WASP.Core.MainContext.Commands.ExecutionVulnerabilityScan
{
    public class ExecutionVulnerabilityScanQueryHandler : IRequestHandler<ExecutionVulnerabilityScanQuery, IEnumerable<ExecutionVulnerabilityScanViewModel>>
    {
        private readonly IEnumerable<LolBin> _lolBins;

        public ExecutionVulnerabilityScanQueryHandler(IEnumerable<LolBin> lolBins)
        {
            _lolBins = lolBins;
        }

        public Task<IEnumerable<ExecutionVulnerabilityScanViewModel>> Handle(ExecutionVulnerabilityScanQuery request, CancellationToken cancellationToken)
        {
            List<ExecutionVulnerabilityScanViewModel> viewModels = new List<ExecutionVulnerabilityScanViewModel>();

            _lolBins
                .ToList()
                .ForEach(lolBin =>
                {
                    ExecutionVulnerabilityScanViewModel viewModel = new ExecutionVulnerabilityScanViewModel(lolBin.Name, lolBin.Description);

                    lolBin
                        .Vulnerabilities
                        .ForEach(vulnerability => {
                            bool isSuccess = vulnerability.TryExploit();

                            ExecutionVulnerabilityResult executionVulnerabilityResult = new ExecutionVulnerabilityResult(vulnerability.Name, vulnerability.Description, isSuccess);
                            viewModel.ExecutionVulnerabilityResults.Add(executionVulnerabilityResult);
                            viewModels.Add(viewModel);

                            vulnerability.Cleanup();
                        });
                });

            return Task.FromResult(viewModels.AsEnumerable());
        }
    }
}
